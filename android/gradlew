#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

WRAPPER_VERSION="8.13.0"
WRAPPER_SHA256="81a82aaea5abcc8ff68b3dfcb58b3c3c429378efd98e7433460610fecd7ae45f"
REPO_WRAPPER_JAR=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
CACHE_ROOT=${GRADLE_USER_HOME:-$HOME/.gradle}/wrapper/dists/gradle-wrapper
CACHE_DIR=$CACHE_ROOT/$WRAPPER_VERSION
CACHED_WRAPPER_JAR=$CACHE_DIR/gradle-wrapper.jar

compute_sha256() {
    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum "$1" | awk '{print $1}'
        return 0
    elif command -v shasum >/dev/null 2>&1; then
        shasum -a 256 "$1" | awk '{print $1}'
        return 0
    fi
    return 1
}

has_zip_magic() {
    if [ ! -f "$1" ]; then
        return 1
    fi

    if command -v hexdump >/dev/null 2>&1; then
        magic=$(LC_ALL=C hexdump -n 4 -ve '1/1 "%02x"' "$1" 2>/dev/null)
    else
        magic=$(LC_ALL=C od -An -tx1 -N4 "$1" 2>/dev/null | tr -d ' \n')
    fi

    [ "$magic" = "504b0304" ]
}

validate_wrapper_file() {
    if [ ! -f "$1" ]; then
        return 1
    fi

    if ! has_zip_magic "$1"; then
        return 1
    fi

    checksum=$(compute_sha256 "$1" 2>/dev/null || true)
    if [ -n "$checksum" ] && [ "$checksum" != "$WRAPPER_SHA256" ]; then
        return 1
    fi

    return 0
}

if validate_wrapper_file "$REPO_WRAPPER_JAR"; then
    if ! validate_wrapper_file "$CACHED_WRAPPER_JAR"; then
        mkdir -p "$CACHE_DIR" || die "Unable to create Gradle wrapper cache directory"
        if ! cp "$REPO_WRAPPER_JAR" "$CACHED_WRAPPER_JAR" >/dev/null 2>&1; then
            warn "Unable to prime cached Gradle wrapper from $REPO_WRAPPER_JAR"
            rm -f "$CACHED_WRAPPER_JAR"
        fi
    fi
else
    if [ -f "$REPO_WRAPPER_JAR" ]; then
        warn "Gradle wrapper JAR at $REPO_WRAPPER_JAR does not match the expected distribution and will be ignored."
    fi
fi

WRAPPER_JAR=$CACHED_WRAPPER_JAR

if ! validate_wrapper_file "$WRAPPER_JAR"; then
    DOWNLOAD_SOURCES="https://downloads.gradle.org/distributions/gradle-8.13.0-wrapper.jar https://services.gradle.org/distributions/gradle-8.13.0-wrapper.jar https://downloads.gradle.org/distributions/gradle-8.13-wrapper.jar https://services.gradle.org/distributions/gradle-8.13-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.13.0/gradle/wrapper/gradle-wrapper.jar"
    DOWNLOAD_TOOL=""
    if command -v curl >/dev/null 2>&1; then
        DOWNLOAD_TOOL="curl"
    elif command -v wget >/dev/null 2>&1; then
        DOWNLOAD_TOOL="wget"
    fi

    [ -n "$DOWNLOAD_TOOL" ] || die "Gradle wrapper JAR is missing. Install curl or wget so it can be downloaded automatically."

    TMP_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t gradle-wrapper)
    trap 'rm -rf "$TMP_DIR"' EXIT HUP INT TERM

    for SOURCE in $DOWNLOAD_SOURCES; do
        if [ "$DOWNLOAD_TOOL" = "curl" ]; then
            if curl --fail --location --silent --show-error "$SOURCE" --output "$TMP_DIR/gradle-wrapper.jar"; then
                break
            fi
        else
            if wget --quiet "$SOURCE" --output-document="$TMP_DIR/gradle-wrapper.jar"; then
                break
            fi
        fi
        rm -f "$TMP_DIR/gradle-wrapper.jar"
    done

    if [ ! -f "$TMP_DIR/gradle-wrapper.jar" ]; then
        rm -rf "$TMP_DIR"
        trap - EXIT HUP INT TERM
        die "Downloading Gradle wrapper failed from all known sources"
    fi

    VERIFY_SUM=$(compute_sha256 "$TMP_DIR/gradle-wrapper.jar" 2>/dev/null || true)

    if [ -n "$VERIFY_SUM" ] && [ "$VERIFY_SUM" != "$WRAPPER_SHA256" ]; then
        rm -rf "$TMP_DIR"
        trap - EXIT HUP INT TERM
        die "Gradle wrapper download checksum mismatch (expected $WRAPPER_SHA256, got $VERIFY_SUM)"
    fi

    mkdir -p "$CACHE_DIR" || die "Unable to create Gradle wrapper cache directory"
    mv "$TMP_DIR/gradle-wrapper.jar" "$CACHED_WRAPPER_JAR" || die "Unable to move Gradle wrapper into place"
    rm -rf "$TMP_DIR"
    trap - EXIT HUP INT TERM
fi

if ! validate_wrapper_file "$CACHED_WRAPPER_JAR"; then
    die "Cached Gradle wrapper at $CACHED_WRAPPER_JAR is invalid"
fi

WRAPPER_JAR=$CACHED_WRAPPER_JAR

CLASSPATH=$WRAPPER_JAR

if [ "$WRAPPER_JAR" = "$CACHED_WRAPPER_JAR" ]; then
    PROPERTIES_SOURCE=$APP_HOME/gradle/wrapper/gradle-wrapper.properties
    PROPERTIES_TARGET=$CACHE_DIR/gradle-wrapper.properties
    if [ -f "$PROPERTIES_SOURCE" ]; then
        cp "$PROPERTIES_SOURCE" "$PROPERTIES_TARGET" || die "Unable to sync Gradle wrapper properties into cache"
    fi
fi


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
